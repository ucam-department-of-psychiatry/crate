---
# yamllint disable rule:line-length
# yamllint disable rule:comments-indentation
# docker/dockerfiles/docker-compose.yaml
#
# See the help!
# https://crateanon.readthedocs.io/en/latest/installation/docker.html

# =============================================================================
# Environment variables used (see help)
# =============================================================================
#
# Those with defaults in the .env file in this directory:
#
#   COMPOSE_PROJECT_NAME -- used by Docker Compose itself
#   CRATE_DOCKER_CRATE_ANON_CONFIG
#   CRATE_DOCKER_CRATE_CHERRYPY_ARGS
#   CRATE_DOCKER_CRATE_WAIT_FIR
#   CRATE_DOCKER_CRATEWEB_CONFIG_FILENAME
#   CRATE_DOCKER_CRATEWEB_HOST_PORT
#   CRATE_DOCKER_CRATEWEB_SSL_CERTIFICATE
#   CRATE_DOCKER_CRATEWEB_SSL_PRIVATE_KEY
#   CRATE_DOCKER_FLOWER_HOST_PORT
#   CRATE_DOCKER_GATE_VERSION
#   CRATE_DOCKER_IMAGE_TAG
#   CRATE_DOCKER_ODBC_USER_CONFIG
#   CRATE_DOCKER_REMOTE_PDB_CRATE_SERVER_HOST_PORT
#   CRATE_DOCKER_REMOTE_PDB_CRATE_WORKERS_HOST_PORT
#   CRATE_DOCKER_REMOTE_PDB_CRATE_FLOWER_HOST_PORT
#   CRATE_DOCKER_REMOTE_PDB_PORT
#   CRATE_DOCKER_RESTART_POLICY

# Those without defaults:
#
#   CRATE_DOCKER_CONFIG_HOST_DIR
#   CRATE_DOCKER_FILES_HOST_DIR
#   CRATE_DOCKER_GATE_BIOYODIE_RESOURCES_HOST_DIR
#   CRATE_DOCKER_INSTALL_GROUP_ID
#   CRATE_DOCKER_INSTALL_USER_ID
#   CRATE_DOCKER_STATIC_HOST_DIR


# =============================================================================
# Data volumes
# =============================================================================

volumes:
    # See Docker Compose "Volume configuration reference". Note that the syntax
    # here is not the same as for "volumes:" within a service (container).
    # https://docs.docker.com/compose/compose-file/#volume-configuration-reference

    rabbitmq_volume:
        # Again, we make it explicit (or we get Docker gibberish names).

    crate_config_volume:
        # Holds CRATE config files.
        #
        # The alternative to mounting a directory is Docker "configs" but these
        # are a bit different and don't allow single-file bind-mounting under
        # Windows. See https://docs.docker.com/engine/swarm/configs/

        driver: local
        driver_opts:
            o: bind
            type: none
            # We use environment variable substitution.
            # https://docs.docker.com/compose/compose-file/#variable-substitution
            device: "${CRATE_DOCKER_CONFIG_HOST_DIR}"

    crate_files_volume:
        # General file storage on the host machine
        driver: local
        driver_opts:
            o: bind
            type: none
            # We use environment variable substitution.
            # https://docs.docker.com/compose/compose-file/#variable-substitution
            device: "${CRATE_DOCKER_FILES_HOST_DIR}"

    crate_static_volume:
        # Space to collect static files (Django STATIC_ROOT)
        driver: local
        driver_opts:
            o: bind
            type: none
            # We use environment variable substitution.
            # https://docs.docker.com/compose/compose-file/#variable-substitution
            device: "${CRATE_DOCKER_STATIC_HOST_DIR}"

    crate_tmp_volume:
        # Space to put lock files, user downloads, etc., that need to be shared
        # between containers, but which are expected to be temporary.

    bioyodie_resource_volume:
        # We cannot pre-download UMLS files, for licensing reasons. So we
        # provide a script to process UMLS data. Here, we mount the results.
        driver: local
        driver_opts:
            o: bind
            type: none
            device: "${CRATE_DOCKER_GATE_BIOYODIE_RESOURCES_HOST_DIR}"


# =============================================================================
# Containers (services)
# =============================================================================

services:

    # -------------------------------------------------------------------------
    # RabbitMQ container, providing a message queue.
    # -------------------------------------------------------------------------
    # AMQP security is not a concern because this is only used internally to
    # the Docker container group.

    rabbitmq:

        # Base Docker image.
        image: rabbitmq:3.8.5
        container_name: crate_rabbitmq

        # Restart policy
        restart: "${CRATE_DOCKER_RESTART_POLICY}"

        # Expose ports to linked services without publishing them to the host.
        # Specify the container (internal) port.
        expose:
            # The default RabbitMQ port is 5672.
            - "5672"

        # Specify volumes by name, having explored the default container to
        # find out what it creates (and where it mounts it) otherwise.
        # (You can't have no volume.)
        volumes:
            - rabbitmq_volume:/var/lib/rabbitmq

        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - crateanon_network


    # -------------------------------------------------------------------------
    # CRATE image, with build commands (to create from the Dockerfile),
    # running the workers.
    # -------------------------------------------------------------------------

    crate_workers:
        # Build a container from a Dockerfile.
        build:
            # Context for Docker to build the image (relative to this file).
            context: ../../

            # Filename of the Dockerfile to use, relative to the context.
            dockerfile: docker/dockerfiles/crate.Dockerfile

            args:
                - USER_ID=${CRATE_DOCKER_INSTALL_USER_ID}
                - GROUP_ID=${CRATE_DOCKER_INSTALL_GROUP_ID}
                - GATE_VERSION=${CRATE_DOCKER_GATE_VERSION}

        # If you specify "image" as well as "build", Compose names the built
        # image. Syntax is "IMAGE[:TAG]".
        image: ${CRATE_DOCKER_IMAGE_TAG}
        # Otherwise it will try to pull https://hub.docker.com/_/crate
        # which isn't us
        pull_policy: never
        container_name: crate_crate_workers

        # Start order. See docs -- note that this is "order to start", not
        # "wait for startup to complete".
        depends_on:
            - rabbitmq

        # Restart policy
        restart: "${CRATE_DOCKER_RESTART_POLICY}"

        # Mount config file directory and other volumes.
        volumes:
            - bioyodie_resource_volume:/crate/bioyodie/bio-yodie-resources
            - crate_config_volume:/crate/cfg
            - crate_files_volume:/crate/files
            - crate_static_volume:/crate/static
            - crate_tmp_volume:/crate/tmp

        ports:
            - "${CRATE_DOCKER_REMOTE_PDB_CRATE_WORKERS_HOST_PORT}:${CRATE_DOCKER_REMOTE_PDB_PORT}"

        environment:
            CRATE_ANON_CONFIG: "/crate/cfg/${CRATE_DOCKER_CRATE_ANON_CONFIG}"
            CRATE_GATE_PLUGIN_FILE: "/crate/src/crate_anon/nlp_manager/specimen_gate_plugin_file.ini"
            CRATE_WAIT_FOR: ${CRATE_DOCKER_CRATE_WAIT_FOR}
            CRATE_WEB_LOCAL_SETTINGS: "/crate/cfg/${CRATE_DOCKER_CRATEWEB_CONFIG_FILENAME}"
            CRATE_WEB_STATIC_ROOT: "/crate/static"
            DJANGO_SUPERUSER_USERNAME: "${CRATE_DOCKER_CRATEWEB_SUPERUSER_USERNAME}"
            DJANGO_SUPERUSER_PASSWORD: "${CRATE_DOCKER_CRATEWEB_SUPERUSER_PASSWORD}"
            DJANGO_SUPERUSER_EMAIL: "${CRATE_DOCKER_CRATEWEB_SUPERUSER_EMAIL}"
            GATE_HOME: "/crate/gate"
            KCL_LEWY_BODY_DIAGNOSIS_DIR: "/crate/kcl_lewy_body_dementia"
            KCL_PHARMACOTHERAPY_DIR: "/crate/kcl_pharmacotherapy/brc-gate-pharmacotherapy"
            KCL_KCONNECT_DIR: "/crate/bioyodie"
            ODBCINI: "/crate/cfg/${CRATE_DOCKER_ODBC_USER_CONFIG}"
            PYTHONBREAKPOINT: "remote_pdb.set_trace"
            REMOTE_PDB_HOST: "0.0.0.0"
            REMOTE_PDB_PORT: ${CRATE_DOCKER_REMOTE_PDB_PORT}

        # Command to execute
        command: ["crate_launch_celery"]

        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - crateanon_network


    # -------------------------------------------------------------------------
    # Re-use the CRATE image, but run the CRATE web server.
    # -------------------------------------------------------------------------

    crate_server:
        # Re-use the image built above.
        image: ${CRATE_DOCKER_IMAGE_TAG}
        # Otherwise it will try to pull https://hub.docker.com/_/crate
        # which isn't us
        pull_policy: never
        container_name: crate_crate_server

        # Start order.
        depends_on:
            - crate_workers

        # Restart policy
        restart: "${CRATE_DOCKER_RESTART_POLICY}"

        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - crateanon_network

        # Publish port to host.
        ports:
            - "${CRATE_DOCKER_CRATEWEB_HOST_PORT}:8000"
            - "${CRATE_DOCKER_REMOTE_PDB_CRATE_SERVER_HOST_PORT}:${CRATE_DOCKER_REMOTE_PDB_PORT}"

        # Mount config file directory and other volumes.
        volumes:
            - bioyodie_resource_volume:/crate/bioyodie/bio-yodie-resources
            - crate_config_volume:/crate/cfg
            - crate_files_volume:/crate/files
            - crate_static_volume:/crate/static
            - crate_tmp_volume:/crate/tmp

        environment:
            CRATE_ANON_CONFIG: "/crate/cfg/${CRATE_DOCKER_CRATE_ANON_CONFIG}"
            CRATE_GATE_PLUGIN_FILE: "/crate/src/crate_anon/nlp_manager/specimen_gate_plugin_file.ini"
            CRATE_WAIT_FOR: ${CRATE_DOCKER_CRATE_WAIT_FOR}
            CRATE_WEB_LOCAL_SETTINGS: "/crate/cfg/${CRATE_DOCKER_CRATEWEB_CONFIG_FILENAME}"
            CRATE_WEB_STATIC_ROOT: "/crate/static"
            DJANGO_SUPERUSER_USERNAME: "${CRATE_DOCKER_CRATEWEB_SUPERUSER_USERNAME}"
            DJANGO_SUPERUSER_PASSWORD: "${CRATE_DOCKER_CRATEWEB_SUPERUSER_PASSWORD}"
            DJANGO_SUPERUSER_EMAIL: "${CRATE_DOCKER_CRATEWEB_SUPERUSER_EMAIL}"
            GATE_HOME: "/crate/gate"
            KCL_LEWY_BODY_DIAGNOSIS_DIR: "/crate/kcl_lewy_body_dementia"
            KCL_PHARMACOTHERAPY_DIR: "/crate/kcl_pharmacotherapy/brc-gate-pharmacotherapy"
            KCL_KCONNECT_DIR: "/crate/bioyodie"
            ODBCINI: "/crate/cfg/${CRATE_DOCKER_ODBC_USER_CONFIG}"
            PYTHONBREAKPOINT: "remote_pdb.set_trace"
            REMOTE_PDB_HOST: "0.0.0.0"
            REMOTE_PDB_PORT: ${CRATE_DOCKER_REMOTE_PDB_PORT}

        # Command to execute
        # Can use shell-style or list-style syntax.
        command: ["crate_launch_cherrypy_server ${CRATE_DOCKER_CRATE_CHERRYPY_ARGS}"]


    # -------------------------------------------------------------------------
    # CRATE background monitor, using Flower
    # -------------------------------------------------------------------------

    flower:
        # Re-use the image built above.
        image: ${CRATE_DOCKER_IMAGE_TAG}
        # Otherwise it will try to pull https://hub.docker.com/_/crate
        # which isn't us
        pull_policy: never
        container_name: crate_flower

        # Start order.
        depends_on:
            - crate_workers

        # Restart policy
        restart: "${CRATE_DOCKER_RESTART_POLICY}"

        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - crateanon_network

        # Publish port to host.
        ports:
            # Default internal Flower port is 5555.
            - "${CRATE_DOCKER_FLOWER_HOST_PORT}:5555"
            - "${CRATE_DOCKER_REMOTE_PDB_CRATE_FLOWER_HOST_PORT}:${CRATE_DOCKER_REMOTE_PDB_PORT}"

        # Mount config file directory
        volumes:
            - crate_config_volume:/crate/cfg
            - crate_files_volume:/crate/files
            - crate_static_volume:/crate/static
            - crate_tmp_volume:/crate/tmp

        environment:
            CRATE_ANON_CONFIG: "/crate/cfg/${CRATE_DOCKER_CRATE_ANON_CONFIG}"
            CRATE_WAIT_FOR: ${CRATE_DOCKER_CRATE_WAIT_FOR}
            CRATE_WEB_LOCAL_SETTINGS: "/crate/cfg/${CRATE_DOCKER_CRATEWEB_CONFIG_FILENAME}"
            CRATE_WEB_STATIC_ROOT: "/crate/static"
            ODBCINI: "/crate/cfg/${CRATE_DOCKER_ODBC_USER_CONFIG}"
            PYTHONBREAKPOINT: "remote_pdb.set_trace"
            REMOTE_PDB_HOST: "0.0.0.0"
            REMOTE_PDB_PORT: ${CRATE_DOCKER_REMOTE_PDB_PORT}

        command: ["crate_launch_flower"]

    # -------------------------------------------------------------------------
    # TODO: CRATE NLPRP server
    # -------------------------------------------------------------------------


    # -------------------------------------------------------------------------
    # TODO: SemEHR (noting that we already have KConnect: what else does SemEHR offer?)
    # -------------------------------------------------------------------------
    # - https://github.com/CogStack/CogStack-SemEHR
    # - https://github.com/CogStack/CogStack-SemEHR/tree/master/docker
    # - https://pubmed.ncbi.nlm.nih.gov/29361077/
    # Note that Bio-YODIE is its core NLP component.

    # semehr:
    #    image: semehr/core
    #
    #    restart: "${CRATE_DOCKER_RESTART_POLICY}"


# =============================================================================
# Networks
# =============================================================================

networks:
    crateanon_network:
        driver: bridge
