"""
crate_anon/crateweb/config/settings.py

===============================================================================

    Copyright (C) 2015, University of Cambridge, Department of Psychiatry.
    Created by Rudolf Cardinal (rnc1001@cam.ac.uk).

    This file is part of CRATE.

    CRATE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CRATE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CRATE. If not, see <https://www.gnu.org/licenses/>.

===============================================================================

**Django settings for crateweb project.**

(Note: DIFFERENT from user-supplied settings; these are the "internal" fixed
settings.)

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# =============================================================================
# Imports
# =============================================================================

import importlib.machinery
import logging
import os

from cardinal_pythonlib.docker import running_under_docker

from crate_anon.common.constants import (
    DockerConstants,
    EnvVar,
    RUNNING_WITHOUT_CONFIG,
)
from crate_anon.common.dockerfunc import warn_if_not_within_docker_dir
from crate_anon.crateweb.config.constants import (
    CRATEWEB_CONFIG_ENV_VAR,
    UrlNames,
)

# https://stackoverflow.com/questions/2636536/how-to-make-django-work-with-unsupported-mysql-drivers-such-as-gevent-mysql-or-c  # noqa: E501
try:
    import pymysql

    pymysql.install_as_MySQLdb()
except ImportError:
    pymysql = None

log = logging.getLogger(__name__)


# =============================================================================
# Docker
# =============================================================================

RUNNING_UNDER_DOCKER = running_under_docker()
if RUNNING_UNDER_DOCKER:
    log.info("Running under Docker")


# =============================================================================
# Directories
# =============================================================================

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# This is the path of the file FROM WHICH THE MODULE WAS LOADED, NOT THE
# DIRECTORY THIS FILE IS IN. So for command-line execute it's e.g.
# /somewhere/crate/crateweb (the directory in which manage.py runs).
# See https://docs.python.org/2/reference/datamodel.html
# Verify this with:

# log.warning(f"BASE_DIR: {BASE_DIR}")


# =============================================================================
# Django core settings
# =============================================================================

# Application definition
INSTALLED_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",  # for nice comma formatting of numbers
    "debug_toolbar",  # for debugging
    "django_extensions",  # for graph_models, show_urls etc.
    "sslserver",  # for SSL testing
    "rest_framework",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    # 'kombu.transport.django',  # for Celery with Django database as broker
    # 'template_profiler_panel',
    # 'silk',
    "crate_anon.crateweb.config.apps.UserProfileAppConfig",  # for user-specific settings  # noqa: E501
    "crate_anon.crateweb.config.apps.ResearchAppConfig",  # the research database query app  # noqa: E501
    "crate_anon.crateweb.config.apps.ConsentAppConfig",  # the consent-to-contact app  # noqa: E501
    "crate_anon.crateweb.config.apps.CoreAppConfig",  # for e.g. the runcpserver command  # noqa: E501
    "crate_anon.crateweb.config.apps.ApiConfig",  # for the anonymisation API
)

MIDDLEWARE = (
    # 'silk.middleware.SilkyMiddleware',
    # Last, when using the profiling panel? But actually breaks it...
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # ... should be added automatically, but there's a problem (2016-04-14)
    # ... reinstated here 2017-01-30 (django-debug-toolbar==1.6)
    # ... "as early as possible... but after any other middle that encodes the
    #     response's content, such as GZipMiddleware"
    # ... http://django-debug-toolbar.readthedocs.io/en/1.0/installation.html#explicit-setup  # noqa: E501
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    # Additional:
    "cardinal_pythonlib.django.middleware.UserBasedExceptionMiddleware",  # provide debugging details to superusers  # noqa: E501
    "cardinal_pythonlib.django.middleware.LoginRequiredMiddleware",  # prohibit all pages except login pages if not logged in  # noqa: E501
    # 'cardinal_pythonlib.django.middleware.DisableClientSideCachingMiddleware',  # no client-side caching  # noqa: E501
    "crate_anon.crateweb.core.middleware.RestrictAdminMiddleware",  # non-developers can't access the devadmin site  # noqa: E501
    # 'cardinal_pythonlib.django.request_cache.RequestCacheMiddleware',  # per-request cache, UNTESTED  # noqa: E501
)

LOGIN_URL = "/login/"  # for LoginRequiredMiddleware
LOGIN_VIEW_NAME = UrlNames.LOGIN  # for LoginRequiredMiddleware
LOGIN_EXEMPT_URLS = [
    "^anon_api/",
]  # for LoginRequiredMiddleware

ROOT_URLCONF = "crate_anon.crateweb.config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        # 'APP_DIRS': True,  # can't use OPTIONS/loaders with this
        "OPTIONS": {
            "context_processors": [
                # 'django.template.context_processors.debug',
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "crate_anon.crateweb.core.context_processors.common_context",
            ],
            "loaders": [
                # https://docs.djangoproject.com/en/1.9/ref/templates/api/
                (
                    "django.template.loaders.cached.Loader",
                    [
                        "django.template.loaders.filesystem.Loader",
                        "django.template.loaders.app_directories.Loader",
                    ],
                ),
            ],
        },
    },
]

WSGI_APPLICATION = "crate_anon.crateweb.config.wsgi.application"


# =============================================================================
# Debug Toolbar
# =============================================================================

DEBUG_TOOLBAR_PATCH_SETTINGS = False

DEBUG_TOOLBAR_PANELS = [
    # Standard:
    "debug_toolbar.panels.versions.VersionsPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.logging.LoggingPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
    # Built in but not enabled as standard:
    # 'debug_toolbar.panels.profiling.ProfilingPanel',  # EXTREME DANGER! Breaks middleware inc. LoginRequiredMiddleware!  # noqa: E501
    # Extra:
    # 'template_profiler_panel.panels.template.TemplateProfilerPanel',  # removed 2017-01-31; division by zero error  # noqa: E501
]


# =============================================================================
# Celery
# =============================================================================

# BROKER_URL = 'django://'  # for Celery with Django database as broker
BROKER_URL = "amqp://"  # for Celery with RabbitMQ as broker
CELERY_ACCEPT_CONTENT = ["json"]  # avoids potential pickle security problem
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
# Results are OPTIONAL. The CRATE web service doesn't use them.
# But may be helpful for Celery testing.
# See http://docs.celeryproject.org/en/latest/configuration.html#std:setting-CELERY_RESULT_BACKEND  # noqa: E501
CELERY_RESULT_BACKEND = "rpc://"  # uses AMQP
CELERY_RESULT_PERSISTENT = False


# =============================================================================
# Internationalization including date/time formats
# =============================================================================
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

# USE_L10N default now True and deprecated

# https://docs.djangoproject.com/en/1.8/topics/i18n/timezones/
USE_TZ = True

DATE_FORMAT = "j M Y"  # d for leading zero, j for none
TIME_FORMAT = "H:i"
DATETIME_FORMAT = "d M Y, H:i:s"
# O for timezone e.g. "+0100"

SHORT_DATE_FORMAT = "d/m/Y"
SHORT_TIME_FORMAT = "H:i"
SHORT_DATETIME_FORMAT = "d/m/Y, H:i:s"


# =============================================================================
# Static files (CSS, JavaScript, Images)
# =============================================================================
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = "/crate_static/"
# This is a bit hard-coded, but at least it prevents conflicts with other
# programs. No way to make Django look up (reverse) static URLs dynamically
# using get_script_prefix()?
# (I know that sounds a bit crazy, but the idea would be to point Apache to
# serve those static files via a Django-site-specific location.)
#
# It seems not. So specifying STATIC_URL like this means that Django will serve
# them correctly from its development server, and Apache should be pointed to
# serve from this URL (and from wherever seems best on the filesystem) during
# production.

LOCAL_STATIC_DIR = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = (LOCAL_STATIC_DIR,)

if RUNNING_UNDER_DOCKER:
    STATIC_ROOT = os.getenv("CRATE_WEB_STATIC_ROOT")
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static_collected")

# ... for collectstatic

# NOTE that deriving from django.contrib.staticfiles.storage.StaticFilesStorage
# and referring to it with STATICFILES_STORAGE only influences the
# "collectstatic" command, not the creation of URLs to static files, so isn't
# relevant here.
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/


# =============================================================================
# Some managed database access goes to the secret mapping database.
# =============================================================================

# DATABASE_ROUTERS = ['crate_anon.crateweb.research.models.PidLookupRouter']
# ... superseded by use of QuerySet.using()

# PROBLEM 2017-02-12: Django 1.10.5:
# - "Unable to create the django_migrations table..."
#   ... it's trying to do this in the research database
#   ... this suggests it's only a problem if databases appear in
#       DATABASE_ROUTERS:
#       https://code.djangoproject.com/ticket/27054
#   ... fixed by adding allow_migrate() to PidLookupRouter


# https://docs.djangoproject.com/en/4.0/releases/3.2/
# When defining a model, if no field in a model is defined with
# primary_key=True an implicit primary key is added. The type of this implicit
# primary key can now be controlled via the DEFAULT_AUTO_FIELD
# In a future Django release the default value of DEFAULT_AUTO_FIELD will be
# changed to BigAutoField.
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# =============================================================================
# Security; https://docs.djangoproject.com/en/1.8/topics/security/
# =============================================================================

CRATE_HTTPS = True  # may be overridden in local settings

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

X_FRAME_OPTIONS = "SAMEORIGIN"
# ... we need this for the Archive frame views. See
# https://docs.djangoproject.com/en/3.0/ref/clickjacking/


# =============================================================================
# Logging; https://docs.djangoproject.com/en/1.8/topics/logging/
# =============================================================================

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": (
                "%(name)s:%(levelname)s:%(asctime)s.%(msecs)03d:"
                "%(module)s:%(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {
            "format": "%(name)s:%(levelname)s:%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "color": {
            "()": "colorlog.ColoredFormatter",
            "format": (
                "%(white)s%(asctime)s.%(msecs)03d "
                "[p%(process)d.t%(thread)d] "
                "%(name)s:%(levelname)s: "
                "%(reset)s%(log_color)s%(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "log_colors": {
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "bold_yellow",
                "ERROR": "bold_red",
                "CRITICAL": "bold_white,bg_red",
            },
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            # 'filters': ['require_debug_true'],
            "class": "logging.StreamHandler",
            "formatter": "color",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {  # root logger; necessary if everything propagates
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": True,
        },
        # cardinal_pythonlib
        "cardinal_pythonlib": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        # My Django apps:
        "research": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "consent": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "core": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "config": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "extra": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        # For CherryPy:
        "__main__": {  # for our CherryPy launch script, if used
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        # Not sure the following are working, despite the docs!
        # http://docs.cherrypy.org/en/latest/basics.html#play-along-with-your-other-loggers  # noqa: E501
        "cherrypy_console": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "cherrypy_access": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
        "cherrypy_error": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
            "propagate": True,
        },
    },
}


# =============================================================================
# PDF generation
# =============================================================================
# https://pypi.python.org/pypi/pdfkit
# https://wkhtmltopdf.org/usage/wkhtmltopdf.txt
# --disable-smart-shrinking:
#     http://blog.gluga.com/2012/05/wkhtmltopdf-font-and-sizing-issues.html
#     Stops the fonts from being shrunk.
# --enable-local-file-access:
#     for wkhtmltopdf 0.12.6

WKHTMLTOPDF_OPTIONS = {
    "disable-smart-shrinking": "",  # --disable-smart-shrinking
    "dpi": "300",
    "enable-local-file-access": "",  # --enable-local-file-access
    "encoding": "UTF-8",
    "margin-bottom": "20mm",
    "margin-left": "20mm",
    "margin-right": "20mm",
    "margin-top": "20mm",
    "orientation": "portrait",
    "page-size": "A4",
    # 'print-media-type': None,
}
PATIENT_FONTSIZE = "11pt"
# "12.4pt" fails, see below; 11.5pt is pretty big; 11pt is fairly common
# for NHS letters.
_ = """
    NB strange wkhtmltopdf bug: word wrap goes awry with font sizes of
      11.6pt to 12.3pt inclusive
    but is fine with
      10, 11, 11.5, 12.4, 12.5, 13, 18...
    Affects addresses and word wrap within tables.
    Using wkhtmltopdf 0.12.2.1 (with patched qt)
    See https://github.com/wkhtmltopdf/wkhtmltopdf/issues/2505
"""
RESEARCHER_FONTSIZE = "10pt"


# =============================================================================
# Anonymisation API settings
# =============================================================================

REST_FRAMEWORK = {"DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema"}

SPECTACULAR_SETTINGS = {
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "TITLE": "CRATE API",
    "DESCRIPTION": (
        "Clinical Records Anonymisation and Text Extraction (CRATE)"
    ),
    "VERSION": "0.0.1",  # TODO: Allow breaking changes until 1.0.0?
}

# =============================================================================
# Import from a site-specific file
# =============================================================================
# First attempt: import file with a fixed name from the PYTHONPATH.
#       from crate_local_settings import *
# Better: import a file named in an environment variable.

if RUNNING_WITHOUT_CONFIG:
    log.info("Running without local settings")
    # We will only get here for the collectstatic command in the Debian
    # postinst file, so we just need the minimum specified.
    CLINICAL_LOOKUP_DB = "dummy_clinical"
    CLINICAL_LOOKUP_CONSENT_DB = "dummy_clinical"
    EMAIL_SENDER = "dummy"
    FORCE_SCRIPT_NAME = ""
    MAX_UPLOAD_SIZE_BYTES = 1000
    PRIVATE_FILE_STORAGE_ROOT = "/tmp"
    RESEARCH_DB_TITLE = "dummy database title"
    SECRET_KEY = "dummy"  # A Django setting.
else:
    if CRATEWEB_CONFIG_ENV_VAR not in os.environ:
        _linuxpath = (
            DockerConstants.CONFIG_DIR
            if RUNNING_UNDER_DOCKER
            else "/etc/crate"
        )
        raise ValueError(
            f"""
    You must set the {CRATEWEB_CONFIG_ENV_VAR} environment variable first.
    Aim it at your settings file, like this:

    (For Linux:)

    export {CRATEWEB_CONFIG_ENV_VAR}={_linuxpath}/my_secret_crate_settings.py

    (For Windows:)

    set {CRATEWEB_CONFIG_ENV_VAR}=C:/some/path/my_secret_crate_settings.py
        """
        )

    filename = os.environ[CRATEWEB_CONFIG_ENV_VAR]
    if RUNNING_UNDER_DOCKER:
        warn_if_not_within_docker_dir(
            param_name=CRATEWEB_CONFIG_ENV_VAR,
            filespec=filename,
            permit_cfg=True,
            is_env_var=True,
        )

    if EnvVar.GENERATING_CRATE_DOCS not in os.environ:
        print(f"Loading local settings from: {filename}")
    # ... NB logger not yet set to a reasonable priority; use warning level
    # ... no, logger not even configured, and this is loaded via Django;
    #     use print()!
    _loader = importlib.machinery.SourceFileLoader("local_settings", filename)
    # noinspection PyArgumentList
    _local_module = _loader.load_module()
    # noinspection PyUnresolvedReferences
    from local_settings import *  # noqa: F401, F403

    # noinspection PyUnresolvedReferences
    from local_settings import (
        ARCHIVE_TEMPLATE_DIR,
        ARCHIVE_STATIC_DIR,
        ARCHIVE_ATTACHMENT_DIR,
        ARCHIVE_TEMPLATE_CACHE_DIR,
        DATABASE_HELP_HTML_FILENAME,
        PRIVATE_FILE_STORAGE_ROOT,
        PDF_LOGO_ABS_URL,
        TRAFFIC_LIGHT_RED_ABS_URL,
        TRAFFIC_LIGHT_YELLOW_ABS_URL,
        TRAFFIC_LIGHT_GREEN_ABS_URL,
    )

    if RUNNING_UNDER_DOCKER:
        # /crate/cfg, /crate/venv or /crate/files
        paramname_filespec_pairs = [
            ("ARCHIVE_TEMPLATE_DIR", ARCHIVE_TEMPLATE_DIR),
            ("ARCHIVE_STATIC_DIR", ARCHIVE_STATIC_DIR),
            ("DATABASE_HELP_HTML_FILENAME", DATABASE_HELP_HTML_FILENAME),
        ]
        for param_name, filespec in paramname_filespec_pairs:
            warn_if_not_within_docker_dir(
                param_name=param_name,
                filespec=filespec,
                permit_cfg=True,
                permit_files=True,
                permit_venv=True,
            )
        # /crate/cfg or /crate/files
        paramname_filespec_pairs = [
            ("ARCHIVE_ATTACHMENT_DIR", ARCHIVE_ATTACHMENT_DIR),
        ]
        for param_name, filespec in paramname_filespec_pairs:
            warn_if_not_within_docker_dir(
                param_name=param_name,
                filespec=filespec,
                permit_cfg=True,
                permit_files=True,
            )
        # /crate/cfg, /crate/files or /crate/tmp
        paramname_filespec_pairs = [
            ("PRIVATE_FILE_STORAGE_ROOT", PRIVATE_FILE_STORAGE_ROOT),
        ]
        for param_name, filespec in paramname_filespec_pairs:
            warn_if_not_within_docker_dir(
                param_name=param_name,
                filespec=filespec,
                permit_cfg=True,
                permit_files=True,
                permit_tmp=True,
            )
        # /crate/tmp or /crate/files
        paramname_filespec_pairs = [
            ("ARCHIVE_TEMPLATE_CACHE_DIR", ARCHIVE_TEMPLATE_CACHE_DIR),
        ]
        for param_name, filespec in paramname_filespec_pairs:
            warn_if_not_within_docker_dir(
                param_name=param_name,
                filespec=filespec,
                permit_files=True,
                permit_tmp=True,
            )
        # /crate/cfg, /crate/files, /crate/venv, as file: URLs
        paramname_filespec_pairs = [
            ("PDF_LOGO_ABS_URL", PDF_LOGO_ABS_URL),
            ("TRAFFIC_LIGHT_RED_ABS_URL", TRAFFIC_LIGHT_RED_ABS_URL),
            ("TRAFFIC_LIGHT_YELLOW_ABS_URL", TRAFFIC_LIGHT_YELLOW_ABS_URL),
            ("TRAFFIC_LIGHT_GREEN_ABS_URL", TRAFFIC_LIGHT_GREEN_ABS_URL),
        ]
        for param_name, filespec in paramname_filespec_pairs:
            warn_if_not_within_docker_dir(
                param_name=param_name,
                filespec=filespec,
                permit_cfg=True,
                permit_files=True,
                permit_venv=True,
                as_file_url=True,
            )


# =============================================================================
# Extra actions from the site-specific file
# =============================================================================

if CRATE_HTTPS:
    # https://docs.djangoproject.com/en/1.8/ref/settings/
    # We could do
    #   SECURE_SSL_REDIRECT = True  # redirect all HTTP to HTTPS
    #   SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    #   ... trust the X-Forwarded-Proto header from the front-end browser;
    #       if it's 'https', we trust the connection is secure
    # but it is a bit tricky to get right:
    #   https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SECURE_PROXY_SSL_HEADER  # noqa: E501
    # Instead, YOU SHOULD RESTRICT THE FRONT END. See instructions.txt.
    SESSION_COOKIE_SECURE = True  # cookies only via HTTPS
    CSRF_COOKIE_SECURE = True  # CSRF cookies only via HTTPS
